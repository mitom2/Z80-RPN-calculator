.define IO_port                 %10001110
.define IO_keyboard_port        %00001111
.define IO_timer_port           %00000101
.define IO_beginCd			    %00000001 ;Initialize possible connections. Int is generated after this task is finished. After read, return devices table.
.define IO_getDevicesCd		    %00100000 ;After next read, return devices table.
.define IO_cancelReadCd		    %00101111 ;Cancel reading from the controller.
.define IO_disableIntCd		    %00000010 ;Turn off interrupts. Read will be possible only using select, check and read combination.
.define IO_enableIntCd		    %00000100 ;Enable interrupts.
.define IO_getErrorsCd		    %00001000 ;Returns errors table.
.define IO_clearErrorsCd		%00010000 ;Clears all internal errors.
.define IO_selectHIDCd		    %01110000 ;Select HID device for communication. 4 lowest bits are device ID.
.define IO_checkDataHIDCd       %01100000 ;Check if data is available on selected HID device. %00000000 if it is, %00000001 otherwise.
.define IO_readHIDCd			%01000001 ;Prepare data from selected HID device to be read.
.define IO_writeHIDCd		    %01000010 ;Prepare the selected HID device to receive data in next writes.
.define IO_rdyForDataHIDCd	    %01000100 ;Checks whether the HID device is ready to receive data. %00000000 if it is, %00000001 otherwise.
.define IO_numStorageCd		    %10010000 ;Checks whether storage device with id specified by 4 lowest bits is connected. %00000000 if it is, %00000001 otherwise.
.define IO_availStorageCd 	    %10000000 ;Returns number of storage devices connected. Keep in mind that only 1 storage device at a time is supported, any more will cause an error.
.define IO_setRetMdStorageCd	%10001000 ;Sets return mode for storage device. LSB=0 (default) - results in [optional INT], BUSRQ, Write to RAM. LSB=1 - results in [optional INT] and return of table on D bus.
.define IO_checkStorageCd	    %10110000 ;Checks whether data from storage device is available. %00000000 if it is, %00000001 otherwise.
.define IO_readStorageCd		%10100000 ;Returns data table. Depending on return mode, all 512 results are either available through multiple reads or they are sent to specified RAM location.
.define IO_ramDestStorageCd	    %10111000 ;Sets RAM address to which data should be saved when using return mode 0. Expects two more writes with the actual address (lower part of address first).
.define IO_selSectStorageCd	    %10111100 ;Selects sector in the storage device. Sector number is expected as four more inputs, from LSB to MSB.
.define IO_beginRdStorageCd	    %10111110 ;Begins accessing selected sector. If interruptions are enabled, one will be generated after completion.
.define IO_writeStorageCd 	    %10111111 ;Writes to the selected sector. Expects more writes: %10000000 (bus source) or %10111111 (RAM source), then size of the data to be written (2 inputs, from LSB to MSB), then starting address of write in sector (2 inputs, LSB to MSB). If BUS source was selected, specified number of data inputs are expected.
.define IO_chkWrPrgStorageCd	%10111101 ;Checks whether the controller is currently writing to the storage device. %00000000 if it is, %00000001 otherwise.
.define IO_rdyFDtaStorageCd	    %10111011 ;Checks whether the storage device is ready to receive data. %00000000 if it is, %00000001 otherwise.
.define IO_selectOtherCd		%11110000 ;Selects other device specified by the lowest 4 bits.
.define IO_getTypeOtherCd       %11100000 ;Returns type of the other connected device (%00001100 - read/write, %00001000 - read only, %00000100 - write only, %00000000 - no communication)
.define IO_rdyForDataOtherCd	%11010000 ;Checks whether the other device is ready to receive data. %00000000 if it is, %00000001 otherwise.
.define IO_checkDataOtherCd	    %11000000 ;Check if data is available on selected other device. %00000000 if it is, %00000001 otherwise.
.define IO_readOtherCd		    %11000001 ;Read data from other device. Behaviour is determined by the device itself.
.define IO_writeOtherCd		    %11000010 ;Write data to the other device. Behaviour is determined by the device itself.
.define IO_setFlagsOtherCd	    %11000100 ;Set flag(s) of other device. Can set multiple flags at once. Flags to be changed are specified by lowest bits. Expects one more input with new flag values (LSB=flag1, MSB=flag2).
.define IO_getFlagsOtherCd	    %11001000 ;Returns flags: %M000000L - M=flag 2, L=flag 1.
.define IO_getCstmIdOtherCd	    %11001100 ;Returns custom ID selected other device.
.define IO_setCstmIdOtherCd	    %11001111 ;Sets new custom ID for the selected other device. Expects one more input with new ID on lower 4 bits.

.macro IO_out
    OUT (IO_port),A
.endmacro

.macro IO_in
    IN A,(IO_port)
.endmacro

.macro IO_beginConn
    LD A,IO_beginCd
    IO_out
.endmacro

.macro IO_getDevices
    LD A,IO_getDevicesCd
    IO_out
.endmacro

.macro IO_cancelRead
    LD A,IO_cancelReadCd
    IO_out
.endmacro

.macro IO_disableInt
    LD A,IO_disableIntCd
    IO_out
.endmacro

.macro IO_enableInt
    LD A,IO_enableIntCd
    IO_out
.endmacro

.macro IO_getErrors
    LD A,IO_getErrorsCd
    IO_out
.endmacro

.macro IO_clearErrors
    LD A,IO_clearErrorsCd
    IO_out
.endmacro

.macro IO_selectHID ;Device ID in A
    ADD A,IO_selectHIDCd
    IO_out
.endmacro

.macro IO_checkDataHID  ;Result in A
    LD A,IO_checkDataHIDCd
    IO_out
    IO_in
.endmacro

.macro IO_readHID
    LD A,IO_readHIDCd
    IO_out
.endmacro

.macro IO_writeHID  ;Writes B to HID
    LD A,IO_writeHIDCd
    GPU_out
    LD A,B
    IO_OUT
.endmacro

.macro IO_rdyForDataHID ;Result in A
    LD A,IO_rdyForDataHIDCd
    IO_out
    IO_in
.endmacro

.macro IO_numStorage    ;Device ID in A, result in A
    ADD A,IO_numStorageCd
    IO_out
    IO_in
.endmacro

.macro IO_availStorage  ;Result in A
    LD A,IO_availStorageCd
    IO_out
    IO_in
.endmacro

.macro IO_setRetMdStorage   ;Mode in A
    ADD A,IO_setRetMdStorageCd
    IO_out
.endmacro

.macro IO_checkStorage  ;Result in A
    LD A,IO_checkStorageCd
    IO_out
    IO_in
.endmacro

.macro IO_readStorage
    LD A,IO_readStorageCd
    IO_out
.endmacro

.macro IO_ramDestStorage    ;Address in HL, invalidates A
    LD A,IO_ramDestStorageCd
    IO_out
    LD A,L
    IO_out
    LD A,H
    IO_out
.endmacro

.macro IO_selSectStorageNoReg    ;Expects 4 inputs, invalidates A
    LD A,IO_selSectStorageCd
    IO_out
.endmacro

.macro IO_selSectStorageReg ;Sector num in (MSB)HLDE(LSB), invalidates A
    LD A,IO_selSectStorageCd
    IO_out
    LD A,E
    IO_out
    LD A,D
    IO_out
    LD A,L
    IO_out
    LD A,H
    IO_out
.endmacro

.macro IO_beginRdStorage
    LD A,IO_beginRdStorageCd
    IO_out
.endmacro

.macro IO_writeStorageCPUSrc    ;Expects more inputs, including 2-byte size
    LD A,IO_writeStorageCd
    IO_out
    LD A,%10000000
    IO_out
.endmacro

.macro IO_writeStorageRAMSrc    ;Data size in DE
    LD A,IO_writeStorageCd
    IO_out
    LD A,%10111111
    IO_out
    LD A,E
    IO_out
    LD A,D
    IO_out
.endmacro

.macro IO_chkWrPrgStorage   ;Result in A
    LD A,IO_chkWrPrgStorage
    IO_out
    IO_in
.endmacro

.macro IO_rdyFDtaStorage    ;Result in A
    LD A,IO_rdyFDtaStorageCd
    IO_out
    IO_in
.endmacro

.macro IO_selectOther   ;Device ID in A
    ADD A,IO_selectOtherCd
    IO_out
.endmacro

.macro IO_getTypeOther  ;Result in A
    LD A,IO_getTypeOtherCd
    IO_out
    IO_in
.endmacro

.macro IO_rdyForDataOther   ;Result in A
    LD A,IO_rdyForDataOtherCd
    IO_out
    IO_in
.endmacro

.macro IO_checkDataOther    ;Result in A
    LD A,IO_checkDataOtherCd
    IO_out
    IO_in
.endmacro

.macro IO_readOther ;Expects outputs
    LD A,IO_readOtherCd
    IO_out
.endmacro

.macro IO_writeOther    ;Expects inputs
    LD A,IO_writeOtherCd
    IO_out
.endmacro

.macro IO_setFlagsOther ;Flags to be changed as two lowest bits of A, new values in B as MSB and LSB
    ADD A,IO_setFlagsOtherCd
    IO_out
    LD A,B
    IO_out
.endmacro

.macro IO_getFlagsOther ;Result in A (MSB and LSB)
    LD A,IO_getFlagsOtherCd
    IO_out
    IO_in
.endmacro

.macro IO_getCstmIdOther    ;Result in A
    LD A,IO_getCstmIdOtherCd
    IO_out
    IO_in
.endmacro

.macro IO_setCstmIdOther    ;New ID in B
    LD A,IO_setCstmIdOther
    IO_out
    LD A,B
    IO_out
.endmacro